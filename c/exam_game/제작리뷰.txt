게임제작리뷰


작성자 이름 : 박성호


제목 : 용사는 일차원


# 게임 간단 소개


일차원 맵에서 전진하며 각 슬라임들을 물리치면 클리어 할 수 있는 게임


# 개발환경과 도구


VisualStudio Communitiy 2015


# 게임에 쓰인 프로그래밍 기술 주요 이슈


1. 전처리기를 이용한 코드 가독성

게임의 상태를 나타내는 변수나 맵길이,캐릭터의 종류 등 개발자가 임의로

의미를 부여하는 값을 전처리기로 명시하여 코드를 읽는데 가독성을 높힘.

ex)

	#define TITLE 0
	#define INIT 1
	#define PLAY 2
	#define QUIT 3

	...

	//게임의 상태를 나타내는 변수
	int tGameState = TITLE;

	//게임의 상태에 따라 분기를 나눔
	switch(tGameState)
	{
	case TITLE://타이틀 화면
		break;
	case INIT://게임 시작 전 초기화
		break;
	case PLAY://플레이
		break;
	case QUIT://종료
		break;
	}


2. 캐릭터 관련 구조체의 매개변수를 포인터로 넘김

다양한 변수들이 구조체들을 call by pointer로 전달하여

많은 값들이 복사가 아닌 참조되도록 하여 메모리 사용량을 줄임

ex)

	void PlayerToMove(Player *tPlayer, int tMap[],int tIndex);

	...

	if(1 == tInput)//플레이어 전진
	{
		PlayerToMove(tPlayer, tMap, 0);
	}

3. 슬라임별 전투방식 분리를 위한 함수 포인터 변수

슬라임을 추상화한 구조체에 함수포인터 변수를 선언하여

동적할당한 슬라임 별로 다른 코드구성을 가지고 있는 함수들의 주소를 담아

각각의 다른 전투방식을 플레이하도록 구현하였다.

ex)
	struct Slime
	{
		...
		char(*mDoBattle)(Player *tPlayer,Slime *tSlime) = NULL;
	}

	tSlime.mDoBattle = DoNormalBattle;
	...
	if(SlimeEncount())//슬라임과 조우 시
	{
		tSlime.DoBattle(tPlayer,tSlime);
	}

이렇게 하면 같은 종류의 슬라임이라도 전투방식을 다양하게 하는데

구현이 쉬워지고 각 전투방식의 구현 코드가 게임루프와도 분리되어

보기도 편해진다.

# 잘한 점

1. 지역변수와 멤버변수의 네이밍이 일관되도록 하였다.

변수명에 대한 규칙을 정하는 것으로 변수의 의미나 스코프 등을

파악하기 편하게 하였다.

2. 각 함수 정의 시 주석 작성

함수들의 용도를 주석으로 작성하도록 해서 함수의 이름과 같이 참고하여

어떤 기능을 구현한 것인지 파악하기 쉽도록 하였음.

# 잘못한 점

1. 게임 루프내의 코드들을 좀 더 함수화 시켜 전체 코드 파악 시

복잡도를 낮출수 있었던거 같다.

2. 함수의 설명을 작성 할때 매개변수나 리턴값에 대한 내용도

추가적으로 작성했다면 이해하기 더 좋았을것 같다.
